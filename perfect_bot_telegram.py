import os
import json
import time
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CRYPTO_PAY_TOKEN = os.getenv('CRYPTO_PAY_TOKEN')
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True, ssl_cert_reqs="none")

if not TELEGRAM_TOKEN or not CRYPTO_PAY_TOKEN:
    logger.error("TELEGRAM_TOKEN or CRYPTO_PAY_TOKEN not set")
    exit(1)

AD_MESSAGE = "\n\nüì¢ –†–µ–∫–ª–∞–º–∞: –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @YourChannel –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–µ!"
FREE_REQUEST_LIMIT = 10
SUBSCRIPTION_PRICE = 5
CACHE_TIMEOUT = 120  # –£–º–µ–Ω—å—à–∏–ª –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏

# –°–ª–æ–≤–∞—Ä–∏ –≤–∞–ª—é—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
CURRENCIES = {
    '–¥–æ–ª–ª–∞—Ä': {'id': 'usd', 'code': 'USD'}, '–¥–æ–ª–ª–∞—Ä—ã': {'id': 'usd', 'code': 'USD'}, '–¥–æ–ª–ª–∞—Ä–∞': {'id': 'usd', 'code': 'USD'}, 'usd': {'id': 'usd', 'code': 'USD'},
    '–≥—Ä–∏–≤–Ω–∞': {'id': 'uah', 'code': 'UAH'}, '–≥—Ä–∏–≤–Ω—ã': {'id': 'uah', 'code': 'UAH'}, '–≥—Ä–∏–≤–µ–Ω': {'id': 'uah', 'code': 'UAH'}, 'uah': {'id': 'uah', 'code': 'UAH'},
    '–µ–≤—Ä–æ': {'id': 'eur', 'code': 'EUR'}, 'eur': {'id': 'eur', 'code': 'EUR'},
    '—Ä—É–±–ª—å': {'id': 'rub', 'code': 'RUB'}, '—Ä—É–±–ª–∏': {'id': 'rub', 'code': 'RUB'}, '—Ä—É–±–ª—è': {'id': 'rub', 'code': 'RUB'}, 'rub': {'id': 'rub', 'code': 'RUB'},
    '–π–µ–Ω–∞': {'id': 'jpy', 'code': 'JPY'}, '–π–µ–Ω—ã': {'id': 'jpy', 'code': 'JPY'}, 'jpy': {'id': 'jpy', 'code': 'JPY'},
    '—é–∞–Ω—å': {'id': 'cny', 'code': 'CNY'}, '—é–∞–Ω–∏': {'id': 'cny', 'code': 'CNY'}, 'cny': {'id': 'cny', 'code': 'CNY'},
    '—Ñ—É–Ω—Ç': {'id': 'gbp', 'code': 'GBP'}, '—Ñ—É–Ω—Ç—ã': {'id': 'gbp', 'code': 'GBP'}, 'gbp': {'id': 'gbp', 'code': 'GBP'},
    '–±–∏—Ç–∫–æ–∏–Ω': {'id': 'bitcoin', 'code': 'BTC'}, '–±–∏—Ç–∫–æ–∏–Ω—ã': {'id': 'bitcoin', 'code': 'BTC'}, '–±–∏—Ç–∫–æ–∏–Ω–∞': {'id': 'bitcoin', 'code': 'BTC'}, 'btc': {'id': 'bitcoin', 'code': 'BTC'},
    '—ç—Ñ–∏—Ä': {'id': 'ethereum', 'code': 'ETH'}, '—ç—Ñ–∏—Ä–∏—É–º': {'id': 'ethereum', 'code': 'ETH'}, '—ç—Ñ–∏—Ä–∞': {'id': 'ethereum', 'code': 'ETH'}, 'eth': {'id': 'ethereum', 'code': 'ETH'},
    '—Ä–∏–ø–ª': {'id': 'ripple', 'code': 'XRP'}, '—Ä–∏–ø–ª—ã': {'id': 'ripple', 'code': 'XRP'}, 'xrp': {'id': 'ripple', 'code': 'XRP'},
    '–¥–æ–≥–µ–∫–æ–∏–Ω': {'id': 'dogecoin', 'code': 'DOGE'}, '–¥–æ–≥–µ': {'id': 'dogecoin', 'code': 'DOGE'}, '–¥–æ–≥–µ–∫–æ–∏–Ω–∞': {'id': 'dogecoin', 'code': 'DOGE'}, 'doge': {'id': 'dogecoin', 'code': 'DOGE'},
    '–∫–∞—Ä–¥–∞–Ω–æ': {'id': 'cardano', 'code': 'ADA'}, '–∫–∞—Ä–¥–∞–Ω—ã': {'id': 'cardano', 'code': 'ADA'}, 'ada': {'id': 'cardano', 'code': 'ADA'},
    '—Å–æ–ª–∞–Ω–∞': {'id': 'solana', 'code': 'SOL'}, '—Å–æ–ª–∞–Ω—ã': {'id': 'solana', 'code': 'SOL'}, 'sol': {'id': 'solana', 'code': 'SOL'},
    '–ª–∞–π—Ç–∫–æ–∏–Ω': {'id': 'litecoin', 'code': 'LTC'}, '–ª–∞–π—Ç–∫–æ–∏–Ω—ã': {'id': 'litecoin', 'code': 'LTC'}, 'ltc': {'id': 'litecoin', 'code': 'LTC'}
}

def save_stats(user_id, request_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Redis"""
    try:
        stats = json.loads(redis_client.get('stats') or '{}')
        current_day = time.strftime("%Y-%m-%d")
        users = stats.get("users", {})
        if user_id not in users:
            users[user_id] = {"requests": 0, "last_reset": current_day}
        
        user_data = users[user_id]
        if user_data["last_reset"] != current_day:
            user_data["requests"] = 0
            user_data["last_reset"] = current_day
        
        user_data["requests"] += 1
        stats["users"] = users
        stats["total_requests"] = stats.get("total_requests", 0) + 1
        request_types = stats.get("request_types", {})
        request_types[request_type] = request_types.get(request_type, 0) + 1
        stats["request_types"] = request_types
        redis_client.set('stats', json.dumps(stats))
        logger.info(f"Stats updated for user {user_id}: {request_type}")
    except Exception as e:
        logger.error(f"Error saving stats: {e}")

def check_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        stats = json.loads(redis_client.get('stats') or '{}')
        subscribed = stats.get("subscriptions", {}).get(user_id, False)
        if subscribed:
            return True
        users = stats.get("users", {})
        user_data = users.get(user_id, {"requests": 0, "last_reset": time.strftime("%Y-%m-%d")})
        remaining = FREE_REQUEST_LIMIT - user_data["requests"]
        return remaining > 0, remaining
    except Exception as e:
        logger.error(f"Error checking limit: {e}")
        return False, 0

def get_exchange_rate(from_currency, to_currency, amount=1):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ CoinGecko"""
    from_key = from_currency.lower()
    to_key = to_currency.lower()
    cache_key = f"rate:{from_key}_{to_key}"
    
    cached = redis_client.get(cache_key)
    if cached:
        rate = float(cached)
        logger.info(f"Using cached rate for {from_key} to {to_key}: {rate}")
        return amount * rate, rate
    
    from_data = CURRENCIES.get(from_key)
    to_data = CURRENCIES.get(to_key)
    if not from_data or not to_data:
        return None, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞."
    
    from_id = from_data['id']
    to_code = to_data['id']
    
    try:
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={from_id}&vs_currencies={to_code}"
    response = requests.get(url, timeout=10).json()
    logger.info(f"API response for {from_id} to {to_code}: {json.dumps(response)}")
    
    if not response or from_id not in response:
        return None, f"–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—Ç {from_id}"
    if to_code not in response[from_id]:
        return None, f"–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {to_code}"
        
    rate = response[from_id][to_code]
    if rate == 0 or rate is None:
        return None, "–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)."
    result = amount * rate
    redis_client.setex(cache_key, CACHE_TIMEOUT, rate)
    return result, rate
except Exception as e:
    logger.error(f"Error fetching rate: {e}, response: {response.text if 'response' in locals() else 'No response'}")
    return None, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    save_stats(user_id, "start")
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π /kurs, –Ω–∞–ø—Ä–∏–º–µ—Ä: "/kurs usd btc" –∏–ª–∏ "/kurs 44 –¥–æ–ª–ª–∞—Ä–∞ –∫ —ç—Ñ–∏—Ä—É".\n'
        f'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏.\n'
        f'–î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî /subscribe –∑–∞ {SUBSCRIPTION_PRICE} USDT.'
    )

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    stats = json.loads(redis_client.get('stats') or '{}')
    if stats.get("subscriptions", {}).get(user_id, False):
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç!")
        return
    
    headers = {'Crypto-Pay-API-Token': CRYPTO_PAY_TOKEN}
    payload = {
        "amount": str(SUBSCRIPTION_PRICE),
        "currency": "USDT",
        "description": f"–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id}"
    }
    try:
        response = requests.post("https://pay.crypt.bot/api/createInvoice", headers=headers, json=payload).json()
        if response.get("ok"):
            invoice_id = response["result"]["invoice_id"]
            pay_url = response["result"]["pay_url"]
            keyboard = [[InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {SUBSCRIPTION_PRICE} USDT", url=pay_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.user_data[user_id] = {"invoice_id": invoice_id}
            await update.message.reply_text(f"–û–ø–ª–∞—Ç–∏ {SUBSCRIPTION_PRICE} USDT –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞:", reply_markup=reply_markup)
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {response.get('error', '–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')}")
    except Exception as e:
        logger.error(f"Exception in subscribe: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.")

async def check_payment_job(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    for user_id, data in list(context.user_data.items()):
        if "invoice_id" not in data:
            continue
        invoice_id = data["invoice_id"]
        headers = {'Crypto-Pay-API-Token': CRYPTO_PAY_TOKEN}
        try:
            response = requests.get(f"https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}", headers=headers).json()
            if response.get("ok") and response["result"]["items"]:
                status = response["result"]["items"][0]["status"]
                if status == "paid":
                    stats = json.loads(redis_client.get('stats') or '{}')
                    stats.setdefault("subscriptions", {})[user_id] = True
                    stats["revenue"] = stats.get("revenue", 0.0) + SUBSCRIPTION_PRICE
                    redis_client.set('stats', json.dumps(stats))
                    del context.user_data[user_id]
                    await context.bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç.")
        except Exception as e:
            logger.error(f"Error in payment check for {user_id}: {e}")

async def kurs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    args = context.args
    can_proceed, remaining = check_limit(user_id)
    
    if not can_proceed:
        await update.message.reply_text(f"–¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏. –ü–æ–¥–ø–∏—à–∏—Å—å: /subscribe")
        return
    if remaining <= 2:
        await update.message.reply_text(f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} –∑–∞–ø—Ä–æ—Å–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–¥–ø–∏—à–∏—Å—å: /subscribe")

    if not args:
        await update.message.reply_text('–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "/kurs usd btc" –∏–ª–∏ "/kurs 44 –¥–æ–ª–ª–∞—Ä–∞ –∫ —ç—Ñ–∏—Ä—É".')
        return
    
    text = " ".join(args).lower()
    parts = text.split()
    
    try:
        if '–∫' in parts:
            k_index = parts.index('–∫')
            amount_part = parts[:k_index]
            from_part = parts[k_index-1]
            to_part = " ".join(parts[k_index+1:])
            amount = float(amount_part[0]) if amount_part and amount_part[0].replace('.', '', 1).isdigit() else 1
            from_currency = from_part
            to_currency = to_part
        else:
            if len(parts) >= 2 and parts[0].replace('.', '', 1).isdigit():
                amount = float(parts[0])
                from_currency, to_currency = parts[1], parts[2]
            else:
                amount = 1
                from_currency, to_currency = parts[0], parts[1]
        
        save_stats(user_id, f"{from_currency}_to_{to_currency}")
        result, rate = get_exchange_rate(from_currency, to_currency, amount)
        
        if result:
            from_code = CURRENCIES[from_currency.lower()]['code']
            to_code = CURRENCIES[to_currency.lower()]['code']
            remaining_display = "‚àû" if json.loads(redis_client.get('stats') or '{}').get("subscriptions", {}).get(user_id, False) else remaining
            response = f"{amount} {from_code} = {result:.6f} {to_code}\n–ö—É—Ä—Å: 1 {from_code} = {rate:.6f} {to_code}\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_display}{AD_MESSAGE}"
            await update.message.reply_text(response)
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {rate}")
    except Exception as e:
        logger.error(f"Error in kurs: {e}")
        await update.message.reply_text('–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã: "/kurs usd btc" –∏–ª–∏ "/kurs 44 –¥–æ–ª–ª–∞—Ä–∞ –∫ —ç—Ñ–∏—Ä—É".')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    current_time = time.time()
    
    if 'last_request' in context.user_data and current_time - context.user_data['last_request'] < 1:
        await update.message.reply_text('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É.')
        return
    
    can_proceed, remaining = check_limit(user_id)
    if not can_proceed:
        await update.message.reply_text(f"–¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏. –ü–æ–¥–ø–∏—à–∏—Å—å: /subscribe")
        return
    
    context.user_data['last_request'] = current_time
    text = update.message.text.lower()
    
    try:
        parts = text.split()
        amount = float(parts[0])
        from_currency = parts[1]
        if '–≤' in parts or 'to' in parts:
            to_currency = parts[-1]
        else:
            raise ValueError
        
        save_stats(user_id, f"{from_currency}_to_{to_currency}")
        result, rate = get_exchange_rate(from_currency, to_currency, amount)
        if result:
            from_code = CURRENCIES[from_currency.lower()]['code']
            to_code = CURRENCIES[to_currency.lower()]['code']
            remaining_display = "‚àû" if json.loads(redis_client.get('stats') or '{}').get("subscriptions", {}).get(user_id, False) else remaining
            response = f"{amount} {from_code} = {result:.6f} {to_code}\n–ö—É—Ä—Å: 1 {from_code} = {rate:.6f} {to_code}\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining_display}{AD_MESSAGE}"
            await update.message.reply_text(response)
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {rate}")
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("kurs", kurs_command))
application.add_handler(CommandHandler("subscribe", subscribe))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.job_queue.run_repeating(check_payment_job, interval=60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    if not redis_client.exists('stats'):
        default_stats = {"users": {}, "total_requests": 0, "request_types": {}, "subscriptions": {}, "revenue": 0.0}
        redis_client.set('stats', json.dumps(default_stats))
    application.run_polling()
