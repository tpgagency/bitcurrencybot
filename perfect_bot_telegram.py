import os
import json
import time
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import redis
from telegram.error import NetworkError, RetryAfter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CRYPTO_PAY_TOKEN = os.getenv('CRYPTO_PAY_TOKEN')
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True, ssl_cert_reqs="none")

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN not set")
    exit(1)
if not CRYPTO_PAY_TOKEN:
    logger.error("CRYPTO_PAY_TOKEN not set")
    exit(1)

AD_MESSAGE = "\n\nüì¢ –†–µ–∫–ª–∞–º–∞: –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @tpgbit –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–µ!"
FREE_REQUEST_LIMIT = 5
SUBSCRIPTION_PRICE = 5
CACHE_TIMEOUT = 120
ADMIN_ID = "1058875848"  # –¢–≤–æ–π ID

# –°–ª–æ–≤–∞—Ä–∏ –≤–∞–ª—é—Ç
CURRENCIES = {
    '–¥–æ–ª–ª–∞—Ä': {'id': 'usd', 'code': 'USD'}, '–¥–æ–ª–ª–∞—Ä—ã': {'id': 'usd', 'code': 'USD'}, '–¥–æ–ª–ª–∞—Ä–∞': {'id': 'usd', 'code': 'USD'}, 'usd': {'id': 'usd', 'code': 'USD'},
    '–≥—Ä–∏–≤–Ω–∞': {'id': 'uah', 'code': 'UAH'}, '–≥—Ä–∏–≤–Ω—ã': {'id': 'uah', 'code': 'UAH'}, '–≥—Ä–∏–≤–µ–Ω': {'id': 'uah', 'code': 'UAH'}, 'uah': {'id': 'uah', 'code': 'UAH'},
    '–µ–≤—Ä–æ': {'id': 'eur', 'code': 'EUR'}, 'eur': {'id': 'eur', 'code': 'EUR'},
    '—Ä—É–±–ª—å': {'id': 'rub', 'code': 'RUB'}, '—Ä—É–±–ª–∏': {'id': 'rub', 'code': 'RUB'}, '—Ä—É–±–ª—è': {'id': 'rub', 'code': 'RUB'}, 'rub': {'id': 'rub', 'code': 'RUB'},
    '–π–µ–Ω–∞': {'id': 'jpy', 'code': 'JPY'}, '–π–µ–Ω—ã': {'id': 'jpy', 'code': 'JPY'}, 'jpy': {'id': 'jpy', 'code': 'JPY'},
    '—é–∞–Ω—å': {'id': 'cny', 'code': 'CNY'}, '—é–∞–Ω–∏': {'id': 'cny', 'code': 'CNY'}, 'cny': {'id': 'cny', 'code': 'CNY'},
    '—Ñ—É–Ω—Ç': {'id': 'gbp', 'code': 'GBP'}, '—Ñ—É–Ω—Ç—ã': {'id': 'gbp', 'code': 'GBP'}, 'gbp': {'id': 'gbp', 'code': 'GBP'},
    '–±–∏—Ç–∫–æ–∏–Ω': {'id': 'bitcoin', 'code': 'BTC'}, '–±–∏—Ç–∫–æ–∏–Ω—ã': {'id': 'bitcoin', 'code': 'BTC'}, '–±–∏—Ç–∫–æ–∏–Ω–∞': {'id': 'bitcoin', 'code': 'BTC'}, 'btc': {'id': 'bitcoin', 'code': 'BTC'},
    '—ç—Ñ–∏—Ä': {'id': 'ethereum', 'code': 'ETH'}, '—ç—Ñ–∏—Ä–∏—É–º': {'id': 'ethereum', 'code': 'ETH'}, '—ç—Ñ–∏—Ä–∞': {'id': 'ethereum', 'code': 'ETH'}, 'eth': {'id': 'ethereum', 'code': 'ETH'},
    '—Ä–∏–ø–ª': {'id': 'ripple', 'code': 'XRP'}, '—Ä–∏–ø–ª—ã': {'id': 'ripple', 'code': 'XRP'}, 'xrp': {'id': 'ripple', 'code': 'XRP'},
    '–¥–æ–≥–µ–∫–æ–∏–Ω': {'id': 'dogecoin', 'code': 'DOGE'}, '–¥–æ–≥–µ': {'id': 'dogecoin', 'code': 'DOGE'}, '–¥–æ–≥–µ–∫–æ–∏–Ω–∞': {'id': 'dogecoin', 'code': 'DOGE'}, 'doge': {'id': 'dogecoin', 'code': 'DOGE'},
    '–∫–∞—Ä–¥–∞–Ω–æ': {'id': 'cardano', 'code': 'ADA'}, '–∫–∞—Ä–¥–∞–Ω—ã': {'id': 'cardano', 'code': 'ADA'}, 'ada': {'id': 'cardano', 'code': 'ADA'},
    '—Å–æ–ª–∞–Ω–∞': {'id': 'solana', 'code': 'SOL'}, '—Å–æ–ª–∞–Ω—ã': {'id': 'solana', 'code': 'SOL'}, 'sol': {'id': 'solana', 'code': 'SOL'},
    '–ª–∞–π—Ç–∫–æ–∏–Ω': {'id': 'litecoin', 'code': 'LTC'}, '–ª–∞–π—Ç–∫–æ–∏–Ω—ã': {'id': 'litecoin', 'code': 'LTC'}, 'ltc': {'id': 'litecoin', 'code': 'LTC'}
}

def save_stats(user_id, request_type):
    try:
        stats = json.loads(redis_client.get('stats') or '{}')
        current_day = time.strftime("%Y-%m-%d")
        users = stats.get("users", {})
        if user_id not in users:
            users[user_id] = {"requests": 0, "last_reset": current_day}
        
        user_data = users[user_id]
        if user_data["last_reset"] != current_day:
            user_data["requests"] = 0
            user_data["last_reset"] = current_day
        
        user_data["requests"] += 1
        stats["users"] = users
        stats["total_requests"] = stats.get("total_requests", 0) + 1
        stats["request_types"][request_type] = stats["request_types"].get(request_type, 0) + 1
        redis_client.set('stats', json.dumps(stats))
        logger.debug(f"Stats updated: {user_id} - {request_type}")
    except Exception as e:
        logger.error(f"Error saving stats: {e}")

def check_limit(user_id):
    try:
        if user_id == ADMIN_ID:
            logger.debug(f"Admin {user_id} - unlimited access")
            return True, "‚àû"
        
        stats = json.loads(redis_client.get('stats') or '{}')
        subscribed = stats.get("subscriptions", {}).get(user_id, False)
        if subscribed:
            logger.debug(f"Subscribed user {user_id} - unlimited access")
            return True, "‚àû"
        
        users = stats.get("users", {})
        user_data = users.get(user_id, {"requests": 0, "last_reset": time.strftime("%Y-%m-%d")})
        remaining = FREE_REQUEST_LIMIT - user_data["requests"]
        logger.debug(f"User {user_id} has {remaining} requests left")
        return remaining > 0, remaining
    except Exception as e:
        logger.error(f"Error checking limit: {e}")
        return False, 0

def get_exchange_rate(from_currency, to_currency, amount=1):
    from_key = from_currency.lower()
    to_key = to_currency.lower()
    cache_key = f"rate:{from_key}_{to_key}"
    
    cached = redis_client.get(cache_key)
    if cached:
        rate = float(cached)
        logger.info(f"Cache hit: {from_key} to {to_key} = {rate}")
        return amount * rate, rate
    
    from_data = CURRENCIES.get(from_key)
    to_data = CURRENCIES.get(to_key)
    if not from_data or not to_data:
        logger.error(f"Invalid currency: {from_key} or {to_key}")
        return None, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞"
    
    from_id = from_data['id']
    to_id = to_data['id']
    
    try:
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={from_id}&vs_currencies={to_id}"
        logger.debug(f"Fetching: {url}")
        response = requests.get(url, timeout=15).json()
        logger.info(f"Response: {json.dumps(response)}")
        
        if from_id in response and to_id in response[from_id]:
            rate = response[from_id][to_id]
            if rate <= 0:
                logger.error(f"Invalid rate: {rate}")
                return None, "–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)"
            redis_client.setex(cache_key, CACHE_TIMEOUT, rate)
            return amount * rate, rate
        
        # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
        url_reverse = f"https://api.coingecko.com/api/v3/simple/price?ids={to_id}&vs_currencies={from_id}"
        logger.debug(f"Fetching reverse: {url_reverse}")
        response_reverse = requests.get(url_reverse, timeout=15).json()
        logger.info(f"Reverse response: {json.dumps(response_reverse)}")
        
        if to_id in response_reverse and from_id in response_reverse[to_id]:
            rate = 1 / response_reverse[to_id][from_id]
            if rate <= 0:
                logger.error(f"Invalid reverse rate: {rate}")
                return None, "–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)"
            redis_client.setex(cache_key, CACHE_TIMEOUT, rate)
            return amount * rate, rate
        
        logger.error(f"No rate found for {from_id} to {to_id}")
        return None, "–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    except requests.RequestException as e:
        logger.error(f"API error: {e}")
        return None, f"–û—à–∏–±–∫–∞ API: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    save_stats(user_id, "start")
    logger.info(f"User {user_id} started bot")
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç.\n'
        '–ü—Ä–∏–º–µ—Ä—ã: "/kurs usd btc" –∏–ª–∏ "/kurs 44 –¥–æ–ª–ª–∞—Ä–∞ –∫ —ç—Ñ–∏—Ä—É".\n'
        f'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏.\n'
        f'–ë–µ–∑–ª–∏–º–∏—Ç: /subscribe –∑–∞ {SUBSCRIPTION_PRICE} USDT.'
    )

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    stats = json.loads(redis_client.get('stats') or '{}')
    if stats.get("subscriptions", {}).get(user_id, False):
        logger.info(f"User {user_id} already subscribed")
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω!")
        return
    
    headers = {'Crypto-Pay-API-Token': CRYPTO_PAY_TOKEN}
    payload = {
        "amount": str(SUBSCRIPTION_PRICE),
        "currency": "USDT",
        "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id}"
    }
    logger.debug(f"Creating invoice: {json.dumps(payload)}")
    try:
        response = requests.post("https://pay.crypt.bot/api/createInvoice", headers=headers, json=payload, timeout=15).json()
        logger.info(f"Invoice response: {json.dumps(response)}")
        if response.get("ok"):
            invoice_id = response["result"]["invoice_id"]
            pay_url = response["result"]["pay_url"]
            keyboard = [[InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {SUBSCRIPTION_PRICE} USDT", url=pay_url)]]
            context.user_data[user_id] = {"invoice_id": invoice_id}
            await update.message.reply_text(f"–û–ø–ª–∞—Ç–∏ {SUBSCRIPTION_PRICE} USDT:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            logger.error(f"Invoice failed: {response}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    except requests.RequestException as e:
        logger.error(f"Subscribe error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")

async def check_payment_job(context: ContextTypes.DEFAULT_TYPE):
    for user_id, data in list(context.user_data.items()):
        if "invoice_id" not in data:
            continue
        invoice_id = data["invoice_id"]
        headers = {'Crypto-Pay-API-Token': CRYPTO_PAY_TOKEN}
        try:
            url = f"https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}"
            response = requests.get(url, headers=headers, timeout=15).json()
            logger.info(f"Payment check for {user_id}: {json.dumps(response)}")
            if response.get("ok") and response["result"]["items"]:
                status = response["result"]["items"][0]["status"]
                if status == "paid":
                    stats = json.loads(redis_client.get('stats') or '{}')
                    stats.setdefault("subscriptions", {})[user_id] = True
                    stats["revenue"] = stats.get("revenue", 0.0) + SUBSCRIPTION_PRICE
                    redis_client.set('stats', json.dumps(stats))
                    del context.user_data[user_id]
                    logger.info(f"Payment confirmed for {user_id}")
                    await context.bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –£ —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç.")
        except requests.RequestException as e:
            logger.error(f"Payment check error for {user_id}: {e}")

async def kurs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    args = context.args
    
    can_proceed, remaining = check_limit(user_id)
    if not can_proceed:
        await update.message.reply_text(f"–õ–∏–º–∏—Ç {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å: /subscribe")
        return
    
    if not args:
        await update.message.reply_text('–ü—Ä–∏–º–µ—Ä—ã: "/kurs usd btc" –∏–ª–∏ "/kurs 44 –¥–æ–ª–ª–∞—Ä–∞ –∫ —ç—Ñ–∏—Ä—É"')
        return
    
    text = " ".join(args).lower()
    parts = text.split()
    logger.info(f"Kurs request from {user_id}: {text}")
    
    try:
        if '–∫' in parts:
            k_index = parts.index('–∫')
            amount = float(parts[0]) if parts[0].replace('.', '', 1).isdigit() else 1
            from_currency = parts[k_index-1]
            to_currency = parts[-1]
        else:
            if len(parts) >= 2 and parts[0].replace('.', '', 1).isdigit():
                amount = float(parts[0])
                from_currency, to_currency = parts[1], parts[2]
            else:
                amount = 1
                from_currency, to_currency = parts[0], parts[1]
        
        save_stats(user_id, f"{from_currency}_to_{to_currency}")
        result, rate = get_exchange_rate(from_currency, to_currency, amount)
        
        if result:
            from_code = CURRENCIES[from_currency.lower()]['code']
            to_code = CURRENCIES[to_currency.lower()]['code']
            remaining_display = "‚àû" if user_id == ADMIN_ID or json.loads(redis_client.get('stats') or '{}').get("subscriptions", {}).get(user_id, False) else remaining
            await update.message.reply_text(
                f"{amount} {from_code} = {result:.6f} {to_code}\n"
                f"–ö—É—Ä—Å: 1 {from_code} = {rate:.6f} {to_code}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_display}{AD_MESSAGE}"
            )
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {rate}")
    except Exception as e:
        logger.error(f"Kurs error for {user_id}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä—ã: '/kurs usd btc'")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if 'last_request' in context.user_data and time.time() - context.user_data['last_request'] < 1:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É!")
        return
    
    can_proceed, remaining = check_limit(user_id)
    if not can_proceed:
        await update.message.reply_text(f"–õ–∏–º–∏—Ç {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å: /subscribe")
        return
    
    context.user_data['last_request'] = time.time()
    text = update.message.text.lower()
    logger.info(f"Message from {user_id}: {text}")
    
    try:
        parts = text.split()
        amount = float(parts[0])
        from_currency = parts[1]
        to_currency = parts[-1] if '–≤' in parts or 'to' in parts else None
        if not to_currency:
            raise ValueError
        
        save_stats(user_id, f"{from_currency}_to_{to_currency}")
        result, rate = get_exchange_rate(from_currency, to_currency, amount)
        if result:
            from_code = CURRENCIES[from_currency.lower()]['code']
            to_code = CURRENCIES[to_currency.lower()]['code']
            remaining_display = "‚àû" if user_id == ADMIN_ID or json.loads(redis_client.get('stats') or '{}').get("subscriptions", {}).get(user_id, False) else remaining
            await update.message.reply_text(
                f"{amount} {from_code} = {result:.6f} {to_code}\n"
                f"–ö—É—Ä—Å: 1 {from_code} = {rate:.6f} {to_code}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_display}{AD_MESSAGE}"
            )
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {rate}")
    except Exception as e:
        logger.error(f"Message error for {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä—ã: '10 usd to btc'")

# –ó–∞–ø—É—Å–∫
application = Application.builder().token(TELEGRAM_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("kurs", kurs_command))
application.add_handler(CommandHandler("subscribe", subscribe))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.job_queue.run_repeating(check_payment_job, interval=60)

if __name__ == "__main__":
    if not redis_client.exists('stats'):
        redis_client.set('stats', json.dumps({"users": {}, "total_requests": 0, "request_types": {}, "subscriptions": {}, "revenue": 0.0}))
    logger.info("Bot starting...")
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    except NetworkError as e:
        logger.error(f"Network error on start: {e}")
        time.sleep(5)
        application.run_polling()
