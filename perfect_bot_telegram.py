import os
import json
import time
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import redis
from telegram.error import TelegramError
from collections import deque
from typing import Optional, Tuple, Dict, Any, List, Union
from functools import wraps

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bot.log')]
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CRYPTO_PAY_TOKEN = os.getenv('CRYPTO_PAY_TOKEN')
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CHANNEL_USERNAME = "@tpgbit"
BOT_USERNAME = "BitCurrencyBot"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN or not CRYPTO_PAY_TOKEN:
    logger.critical("Missing TELEGRAM_TOKEN or CRYPTO_PAY_TOKEN")
    exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
AD_MESSAGE = "\n\nüì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @tpgbit –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–µ\!"
FREE_REQUEST_LIMIT = 5
SUBSCRIPTION_PRICE = 5
CACHE_TIMEOUT = 300
ADMIN_IDS = {"1058875848", "6403305626"}
HISTORY_LIMIT = 20
MAX_RETRIES = 3
HIGH_PRECISION_CURRENCIES = {'BTC', 'ETH', 'XRP', 'DOGE', 'ADA', 'SOL', 'LTC', 'BNB', 'TRX', 'DOT', 'MATIC'}

# API URLs
BINANCE_API_URL = "https://api.binance.com/api/v3/ticker/price"
WHITEBIT_API_URL = "https://whitebit.com/api/v1/public/ticker"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
CURRENCIES = {
    'usd': {'code': 'USDT'}, 'uah': {'code': 'UAH'}, 'eur': {'code': 'EUR'},
    'rub': {'code': 'RUB'}, 'jpy': {'code': 'JPY'}, 'cny': {'code': 'CNY'},
    'gbp': {'code': 'GBP'}, 'kzt': {'code': 'KZT'}, 'try': {'code': 'TRY'},
    'btc': {'code': 'BTC'}, 'eth': {'code': 'ETH'}, 'xrp': {'code': 'XRP'},
    'doge': {'code': 'DOGE'}, 'ada': {'code': 'ADA'}, 'sol': {'code': 'SOL'},
    'ltc': {'code': 'LTC'}, 'usdt': {'code': 'USDT'}, 'bnb': {'code': 'BNB'},
    'trx': {'code': 'TRX'}, 'dot': {'code': 'DOT'}, 'matic': {'code': 'MATIC'}
}

# –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è UAH/USDT
UAH_TO_USDT_FALLBACK = 0.0239
USDT_TO_UAH_FALLBACK = 41.84

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
try:
    redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True, ssl_cert_reqs="none", socket_timeout=10)
except Exception as e:
    logger.critical(f"Failed to initialize Redis client: {e}")
    exit(1)

def init_redis_connection() -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    for attempt in range(MAX_RETRIES):
        try:
            redis_client.ping()
            logger.info("Connected to Redis")
            return True
        except redis.ConnectionError as e:
            logger.warning(f"Redis connection attempt {attempt + 1}/{MAX_RETRIES} failed: {e}")
            time.sleep(2 ** attempt)
    logger.critical("Failed to connect to Redis")
    return False

if not init_redis_connection():
    exit(1)

def require_subscription(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not await enforce_subscription(update, context):
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

def rate_limit(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = str(update.effective_user.id)
        stats = json.loads(redis_client.get('stats') or '{}')
        is_subscribed = user_id in ADMIN_IDS or stats.get("subscriptions", {}).get(user_id)
        delay = 1 if is_subscribed else 5

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        if 'last_request' in context.user_data and time.time() - context.user_data['last_request'] < delay:
            message = f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {delay} —Å–µ–∫—É–Ω–¥{'—É' if delay == 1 else ''}\!"
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await update.effective_message.reply_text(message, parse_mode=ParseMode.MARKDOWN_V2)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        can_proceed, remaining = check_limit(user_id)
        if not can_proceed:
            message = f"‚ùå –õ–∏–º–∏—Ç {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\. /subscribe"
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await update.effective_message.reply_text(message, parse_mode=ParseMode.MARKDOWN_V2)
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        context.user_data['last_request'] = time.time()
        return await func(update, context, *args, **kwargs)
    return wrapper

async def set_bot_commands(application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    await application.bot.set_my_commands([
        ("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), 
        ("currencies", "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"), 
        ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ("subscribe", "–ü–æ–¥–ø–∏—Å–∫–∞"), 
        ("alert", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), 
        ("referrals", "–†–µ—Ñ–µ—Ä–∞–ª—ã"),
        ("history", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    ])
    logger.info("Bot commands set")

async def check_subscription(context: ContextTypes.DEFAULT_TYPE, user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except TelegramError as e:
        logger.error(f"Failed to check subscription for {user_id}: {e}")
        return False

async def enforce_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    user_id = str(update.effective_user.id)
    if await check_subscription(context, user_id):
        return True
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üö´ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @tpgbit, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        await update.effective_message.reply_text(
            "üö´ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @tpgbit, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\!",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    return False

def save_stats(user_id: str, request_type: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        stats = json.loads(redis_client.get('stats') or '{}')
        current_day = time.strftime("%Y-%m-%d")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = stats.setdefault("users", {})
        user_data = users.setdefault(user_id, {"requests": 0, "last_reset": current_day})
        
        # –°–±—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if user_data["last_reset"] != current_day:
            user_data.update(requests=0, last_reset=current_day)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        user_data["requests"] += 1
        stats["total_requests"] = stats.get("total_requests", 0) + 1
        stats.setdefault("request_types", {}).setdefault(request_type, 0)
        stats["request_types"][request_type] += 1
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis
        redis_client.setex('stats', 24 * 60 * 60, json.dumps(stats))
    except Exception as e:
        logger.error(f"Error saving stats for {user_id}: {e}")

def save_history(user_id: str, from_currency: str, to_currency: str, amount: float, result: float):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        history = deque(json.loads(redis_client.get(f"history:{user_id}") or '[]'), maxlen=HISTORY_LIMIT)
        history.append({
            "time": time.strftime("%Y-%m-%d %H:%M:%S"),
            "from": from_currency, 
            "to": to_currency,
            "amount": amount, 
            "result": result
        })
        redis_client.setex(f"history:{user_id}", 30 * 24 * 60 * 60, json.dumps(list(history)))
    except Exception as e:
        logger.error(f"Error saving history for {user_id}: {e}")

def check_limit(user_id: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–º–µ—é—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if user_id in ADMIN_IDS:
            return True, "‚àû"
            
        stats = json.loads(redis_client.get('stats') or '{}')
        if stats.get("subscriptions", {}).get(user_id):
            return True, "‚àû"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = stats.get("users", {})
        user_data = users.get(user_id, {"requests": 0, "last_reset": time.strftime("%Y-%m-%d")})
        remaining = FREE_REQUEST_LIMIT - user_data["requests"]
        
        return remaining > 0, str(remaining)
    except Exception as e:
        logger.error(f"Error checking limit for {user_id}: {e}")
        return False, "0"

def get_exchange_rate(from_currency: str, to_currency: str, amount: float = 1.0) -> Tuple[Optional[float], str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç"""
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    from_key, to_key = from_currency.lower(), to_currency.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
    if from_key not in CURRENCIES or to_key not in CURRENCIES:
        return None, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞"
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    cache_key = f"rate:{from_key}_{to_key}"
    cached = redis_client.get(cache_key)
    if cached:
        rate = float(cached)
        return amount * rate, f"1 {from_key.upper()} = {rate} {to_key.upper()} (cached)"

    from_code, to_code = CURRENCIES.get(from_key)['code'], CURRENCIES.get(to_key)['code']
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–∞–ª—é—Ç
    if from_key == to_key:
        redis_client.setex(cache_key, CACHE_TIMEOUT, 1.0)
        return amount, f"1 {from_key.upper()} = 1 {to_key.upper()}"

    def fetch_rate(url: str, key: str, reverse: bool = False, api_name: str = "API") -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ API"""
        try:
            response = requests.get(url, timeout=5).json()
            rate = float(response[key if not reverse else 'price'])
            return 1 / rate if reverse and rate > 0 else rate if rate > 0 else None
        except (requests.RequestException, ValueError, KeyError, TypeError) as e:
            logger.warning(f"Error fetching rate from {api_name}: {e}")
            return None

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sources = [
        (f"{BINANCE_API_URL}?symbol={from_code}{to_code}", 'price', False, "Binance direct"),
        (f"{BINANCE_API_URL}?symbol={to_code}{from_code}", 'price', True, "Binance reverse"),
        (WHITEBIT_API_URL, f"{from_code}_{to_code}", False, "WhiteBIT direct"),
        (WHITEBIT_API_URL, f"{to_code}_{from_code}", True, "WhiteBIT reverse"),
    ]

    for url, pair, reverse, source in sources:
        rate = fetch_rate(url, 'price' if 'binance' in url else pair, reverse, source.split()[0])
        if rate:
            redis_client.setex(cache_key, CACHE_TIMEOUT, rate)
            formatted_rate = rate if not reverse else 1/rate
            return amount * formatted_rate, f"1 {from_code} = {formatted_rate} {to_code} ({source})"

    # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –≤–∞–ª—é—Ç—É
    for bridge in ('USDT', 'BTC'):
        if from_key != bridge.lower() and to_key != bridge.lower():
            rate_from = fetch_rate(f"{BINANCE_API_URL}?symbol={from_code}{bridge}", 'price')
            if not rate_from:
                rate_from = fetch_rate(f"{BINANCE_API_URL}?symbol={bridge}{from_code}", 'price', True)
                
            rate_to = fetch_rate(f"{BINANCE_API_URL}?symbol={bridge}{to_code}", 'price')
            if not rate_to:
                rate_to = fetch_rate(f"{BINANCE_API_URL}?symbol={to_code}{bridge}", 'price', True)
                
            if rate_from and rate_to:
                bridge_rate = rate_from * (1 / rate_to)
                if bridge_rate > 0:
                    redis_client.setex(cache_key, CACHE_TIMEOUT, bridge_rate)
                    return amount * bridge_rate, f"1 {from_code} = {bridge_rate} {to_code} (Binance via {bridge})"

    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è UAH/USDT
    if from_key == 'uah' and to_key == 'usdt':
        rate = UAH_TO_USDT_FALLBACK
    elif from_key == 'usdt' and to_key == 'uah':
        rate = USDT_TO_UAH_FALLBACK
    else:
        return None, "–ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
    redis_client.setex(cache_key, CACHE_TIMEOUT, rate)
    return amount * rate, f"1 {from_key.upper()} = {rate} {to_key.upper()} (fallback)"

@require_subscription
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    save_stats(user_id, "start")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if context.args and context.args[0].startswith("ref_"):
        await handle_referral(update, context)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [
            InlineKeyboardButton("üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="converter"), 
            InlineKeyboardButton("üìà –ö—É—Ä—Å—ã", callback_data="price")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), 
            InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe")
        ],
        [
            InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="alert"), 
            InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")
        ],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
    ]
    
    await update.effective_message.reply_text(
        f"üëã *–ü—Ä–∏–≤–µ—Ç*\! –Ø {BOT_USERNAME} ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç\!\n"
        f"üîë *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ*: {FREE_REQUEST_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏\n"
        f"üåü *–ë–µ–∑–ª–∏–º–∏—Ç*: /subscribe –∑–∞ {SUBSCRIPTION_PRICE} USDT{AD_MESSAGE}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@require_subscription
async def currencies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currencies"""
    await update.effective_message.reply_text(
        f"üí± *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã*:\n{', '.join(sorted(CURRENCIES.keys()))}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@require_subscription
async def alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alert"""
    user_id = str(update.effective_user.id)
    args = context.args
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if len(args) != 3 or not args[2].replace('.', '', 1).isdigit():
        keyboard = [
            [InlineKeyboardButton("üîî USD ‚Üí BTC", callback_data="alert_example_usd_btc")],
            [InlineKeyboardButton("üîî EUR ‚Üí UAH", callback_data="alert_example_eur_uah")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
        ]
        await update.effective_message.reply_text(
            "üîî *–ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\! –§–æ—Ä–º–∞—Ç: `/alert <–≤–∞–ª—é—Ç–∞1> <–≤–∞–ª—é—Ç–∞2> <–∫—É—Ä—Å>`\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    from_currency, to_currency, target_rate = args[0].lower(), args[1].lower(), float(args[2])
    if from_currency not in CURRENCIES or to_currency not in CURRENCIES:
        await update.effective_message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –≤–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", 
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    alerts = json.loads(redis_client.get(f"alerts:{user_id}") or '[]')
    alerts.append({"from": from_currency, "to": to_currency, "target": target_rate})
    redis_client.setex(f"alerts:{user_id}", 30 * 24 * 60 * 60, json.dumps(alerts))
    
    await update.effective_message.reply_text(
        f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*: {from_currency.upper()} ‚Üí {to_currency.upper()} –ø—Ä–∏ –∫—É—Ä—Å–µ {target_rate}",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîî –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="alert"), 
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
            ]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@require_subscription
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = str(update.effective_user.id)
    stats = json.loads(redis_client.get('stats') or '{}')
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
    
    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id in ADMIN_IDS:
        text = (f"üìä *–ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats.get('users', {}))}\n"
                f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n"
                f"üí∞ –î–æ—Ö–æ–¥: {stats.get('revenue', 0.0)} USDT")
    else:
        text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*:\nüìà –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('users', {}).get(user_id, {}).get('requests', 0)}"
    
    await update.effective_message.reply_text(
        text, 
        reply_markup=InlineKeyboardMarkup(keyboard), 
        parse_mode=ParseMode.MARKDOWN_V2
    )

@require_subscription
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
    user_id = str(update.effective_user.id)
    stats = json.loads(redis_client.get('stats') or '{}')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if stats.get("subscriptions", {}).get(user_id):
        await update.effective_message.reply_text(
            "üíé –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω\!", 
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    try:
        response = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            headers={'Crypto-Pay-API-Token': CRYPTO_PAY_TOKEN},
            json={"asset": "USDT", "amount": str(SUBSCRIPTION_PRICE), "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id}"},
            timeout=15
        ).json()
        
        if response.get("ok"):
            invoice_id = response["result"]["invoice_id"]
            pay_url = response["result"]["pay_url"]
            context.user_data[user_id] = {"invoice_id": invoice_id}
            
            await update.effective_message.reply_text(
                f"üíé –û–ø–ª–∞—Ç–∏ *{SUBSCRIPTION_PRICE} USDT* –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {SUBSCRIPTION_PRICE} USDT", url=pay_url)],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]
                ]),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        else:
            error_msg = response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            logger.error(f"Payment error for {user_id}: {error_msg}")
            await update.effective_message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {error_msg}", 
                parse_mode=ParseMode.MARKDOWN_V2
            )
    except requests.RequestException as e:
        logger.error(f"Subscribe error for {user_id}: {e}")
        await update.effective_message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π", 
            parse_mode=ParseMode.MARKDOWN_V2
        )

@require_subscription
async def referrals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /referrals"""
    user_id = str(update.effective_user.id)
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
    refs = len(json.loads(redis_client.get(f"referrals:{user_id}") or '[]'))
    
    await update.effective_message.reply_text(
        f"üë• *–†–µ—Ñ. —Å—Å—ã–ª–∫–∞*: `{ref_link}`\nüë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: *{refs}*\nüåü –ë–æ–Ω—É—Å—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç\!",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="copy_ref"), 
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
            ]
        ]),
        parse_mode=ParseMode.MARKDOWN_V2
    )

@require_subscription
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    user_id = str(update.effective_user.id)
    history = json.loads(redis_client.get(f"history:{user_id}") or '[]')
    back_button = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]]
    
    if not history:
        await update.effective_message.reply_text(
            "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞*\.",
            reply_markup=InlineKeyboardMarkup(back_button),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return
    
    response = "üìú *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤*:\n" + "\n".join(
        f"‚è∞ {entry['time']}: *{entry['amount']} {entry['from']}* ‚Üí *{entry['result']} {entry['to']}*"
        for entry in reversed(history)
    )
    
    await update.effective_message.reply_text(
        response, 
        reply_markup=InlineKeyboardMarkup(back_button),
        parse_mode=ParseMode.MARKDOWN_V2
    )

async def handle_referral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = str(update.effective_user.id)
    if context.args and context.args[0].startswith("ref_"):
        referrer_id = context.args[0].replace("ref_", "")
        if referrer_id.isdigit() and referrer_id != user_id:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–∞
            referrals = json.loads(redis_client.get(f"referrals:{referrer_id}") or '[]')
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            if user_id not in referrals:
                referrals.append(user_id)
                redis_client.setex(f"referrals:{referrer_id}", 30 * 24 * 60 * 60, json.dumps(referrals))
                await update.effective_message.reply_text(
                    "üë• –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ\!", 
                    parse_mode=ParseMode.MARKDOWN_V2
                )

async def check_payment_job(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    for user_id, data in list(context.user_data.items()):
        if "invoice_id" not in data:
            continue
        
        try:
            response = requests.get(
                f"https://pay.crypt.bot/api/getInvoices?invoice_ids={data['invoice_id']}",
                headers={'Crypto-Pay-API-Token': CRYPTO_PAY_TOKEN},
                timeout=15
            ).json()
            
            if response.get("ok") and response["result"]["items"] and response["result"]["items"][0]["status"] == "paid":
                stats = json.loads(redis_client.get('stats') or '{}')
                stats.setdefault("subscriptions", {})[user_id] = True
                stats["revenue"] = stats.get("revenue", 0.0) + SUBSCRIPTION_PRICE
                redis_client.setex('stats', 30 * 24 * 60 * 60, json.dumps(stats))
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                del context.user_data[user_id]
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    user_id, 
                    "üíé –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞\! –ë–µ–∑–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\.", 
                    parse_mode=ParseMode.MARKDOWN_V2
                )
        except Exception as e:
            logger.error(f"Payment check error for {user_id}: {e}")

async def check_alerts_job(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    stats = json.loads(redis_client.get('stats') or '{}')
    
    for user_id in stats.get("users", {}):
        alerts = json.loads(redis_client.get(f
